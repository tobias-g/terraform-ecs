name: Deploy App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "What environment to deploy to"
        default: 'sandbox'
        type: choice
        options:
        - "sandbox"

permissions:
  contents: write
  id-token: write

jobs:
  docker-build:
    name: "Docker Build"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./app"
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@main
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::765774143504:role/github
          role-session-name: terraform-ecs
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.environment }}-ecs-nodejs
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  code-deploy:
    name: "Code Deploy"
    needs: [docker-build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: ["eu-west-1", "us-east-1"]
    defaults:
      run:
        working-directory: "./app/deploy"
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@main
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::765774143504:role/github
          role-session-name: terraform-ecs
      - name: Code Deploy
        run: ./code-deploy.sh --cluster ${{ inputs.environment }}-ecs --service ecs-nodejs --region ${{ matrix.region }}